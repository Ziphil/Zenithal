\zml?|version="1.0",brace="em",bracket="code",slash="i"|>
\xml?|version="1.0",encoding="UTF-8"|>

\html|lang="ja"|<
  \head<
    \title<XHTML を生成するサンプル>
  >
  \body<
    \h1<見出し>
    \p<
      XML の構文を必要以上に壊さず、XML の冗長性を排除することを目指しています。
    >
    \p<
      タグは\strong<こんな感じ>で書きます。
      属性をもつタグは\span|class="foo",id="bar"|<こんな感じ>にします。
      小要素をもたないタグは\small>や\img|src="baz.png"|>のように書けます。
      ZenML で特殊文字として使われる文字をエスケープするために、&bsol; や &vert; などの実体参照が追加されています。
      XML からもともとある特殊文字については、&amp; のように変換されずに残ります。
      ## この行はコメントです
      XML スタイルの #<コメント># もあります。
    >
    \h1<小要素の調整>
    \h2<空白の無視>
    \p<
      タグ名に「!」を付けると、\strong!< 前後の空白が無視    >されます。
      タグ名に「!!」を付けると、最もインデントされていない行に合わせてインデントが削除されます。
    >
    \pre!!<
      インデントはこの行に合わせられます
        \b<タグが入っていても大丈夫です>
        インデント
          さらにインデント
          \span<
            これでも OK
              さらにインデント
          >
      インデント終わり
    >
    \h2<そのまま出力>
    \p<
      タグ名に「~」を付けると、\strong~<中身が [字句通りに] 解釈されます>。
      実体参照は効きます。
      閉じ山括弧は\strong~<エスケープする \span|class="escape"|<必要&gt; があります>。
      インデントを削除するオプションとも共用できます。
    >
    \pre!!~<
      // HTML の pre タグを書くときに便利です
      public static void main(String... args) {
        if (args[0].equals("h")) {
          for (int i = 0 ; i &lt; 5 ; i ++) {
            System.out.println("Hello");
          }
          System.out.println("End");
        }
        System.exit(0);
      }
    >
    \h1<特殊タグ>
    \p<
      角括弧, 波括弧, スラッシュで囲まれた部分を 1 つのタグ要素と見なして変換することができます。
      変換後の要素名は、ファイル先頭にある処理命令で指定できます。
      例えば、{このように}変換[され]/ます/。
      括弧同士を{入/れ[子]/}にすることも、普通のタグを[\a|href="https://google.com/"|<中に>入れる]こともできます。
      複雑な入れ子のテスト: /あい[うえ]お\span<かきく/けこ{さ}/し>/。
      実体参照を用いて &lsqb;エスケープ&rsqb; することが &lcub;できます&rcub;。
    >
  >
>