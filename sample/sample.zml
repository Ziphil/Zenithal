\zml?|version="1.0.0",brace="em",bracket="code",slash="i"|>
\xml?|version="1.0",encoding="UTF-8"|>

\html|lang="ja"|<
  \head<
    \title<XHTML を生成するサンプル>
  >
  \body<
    \h1<見出し>
    \p<
      XML の構文を必要以上に壊さず、XML の冗長性を排除することを目指しています。
    >
    \p<
      タグは\strong<こんな感じ>で書きます。
      属性をもつタグは\span|class="foo",id="bar"|<こんな感じ>にします。
      小要素をもたないタグは\small>や\img|src="baz.png"|>のように書けます。
      ZenML で特殊文字として使われる文字をエスケープするために、&bsol; や &vert; などの実体参照が追加されています。
      XML からもともとある特殊文字については、&amp; のように変換されずに残ります。
      # コメントは行コメントだけになりました
    >
    \h1<空白の無視>
    \p<
      タグ名に「!」を付けると、\strong!< 前後の空白が無視    >されます。
      タグ名に「!!」を付けると、前後の空白に加えて改行前後の空白も無視されます。
    >
    \table<
      \tr!!<
        \td<例えばここは>
        \td<1 行になります>
      >
      \tr<
        \td<ここと>
        \td<比較してください>
      >
    >
    \h1<特殊タグ>
    \p<
      角括弧, 波括弧, スラッシュで囲まれた部分を 1 つのタグ要素と見なして変換することができます。
      変換後の要素名は、ファイル先頭にある処理命令で指定できます。
      例えば、{このように}変換[され]/ます/。
      括弧同士を{入/れ[子]/}にすることも、普通のタグを[\a|href="https://google.com/"|<中に>入れる]こともできます。
      複雑な入れ子のテスト: /あい[うえ]お\span<かきく/けこ{さ}/し>/。
      実体参照を用いて &lsqb;エスケープ&rsqb; することが &lcub;できます&rcub;。
    >
  >
>